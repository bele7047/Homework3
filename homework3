Ben Lehfeldt-Ehlinger
107017875
11/14/19
Homework#3

---------------------QUESTION 1-------------------------
postgres=# SELECT last_name, first_name FROM employees
WHERE country <> 'UK' ORDER BY last_name ASC;

 last_name | first_name
-----------+------------
 Callahan  | Laura
 Davolio   | Nancy
 Fuller    | Andrew
 Leverling | Janet
 Peacock   | Margaret
(5 rows)

---------------------QUESTION 2-------------------------
postgres=# SELECT product_id, product_name, units_in_stock, unit_price FROM products
 WHERE units_in_stock < reorder_level AND units_in_stock > 1;

 product_id |       product_name        | units_in_stock | unit_price
------------+---------------------------+----------------+------------
          2 | Chang                     |             17 |         19
          3 | Aniseed Syrup             |             13 |         10
         11 | Queso Cabrales            |             22 |         21
         21 | Sir Rodney's Scones       |              3 |         10
         30 | Nord-Ost Matjeshering     |             10 |      25.89
         32 | Mascarpone Fabioli        |              9 |         32
         37 | Gravad lax                |             11 |         26
         43 | Ipoh Coffee               |             17 |         46
         45 | Rogede sild               |              5 |        9.5
         48 | Chocolade                 |             15 |      12.75
         49 | Maxilaku                  |             10 |         20
         56 | Gnocchi di nonna Alice    |             21 |         38
         64 | Wimmers gute Semmelknödel |             22 |      33.25
         66 | Louisiana Hot Spiced Okra |              4 |         17
         68 | Scottish Longbreads       |              6 |       12.5
         70 | Outback Lager             |             15 |         15
         74 | Longlife Tofu             |              4 |         10
(17 rows)


---------------------QUESTION 3-------------------------
postgres=# SELECT product_name, unit_price FROM products
 WHERE unit_price = (SELECT MIN(unit_price) FROM products);

 product_name | unit_price
--------------+------------
 Geitost      |        2.5
(1 row)



---------------------QUESTION 4-------------------------
postgres=# SELECT product_id, product_name, (units_in_stock * unit_price)
AS inventory_value FROM products WHERE (units_in_stock * unit_price < 200)
 ORDER BY (units_in_stock * unit_price) ASC;

 product_id |       product_name        | inventory_value
------------+---------------------------+------------------
         29 | Thüringer Rostbratwurst   |                0
          5 | Chef Anton's Gumbo Mix    |                0
         53 | Perth Pasties             |                0
         17 | Alice Mutton              |                0
         31 | Gorgonzola Telino         |                0
         21 | Sir Rodney's Scones       |               30
         74 | Longlife Tofu             |               40
         45 | Rogede sild               |             47.5
         66 | Louisiana Hot Spiced Okra |               68
         68 | Scottish Longbreads       |               75
         24 | Guaraná Fantástica        |               90
          3 | Aniseed Syrup             |              130
         13 | Konbu                     |              144
         54 | Tourtière                 | 156.449995994568
         48 | Chocolade                 |           191.25
(15 rows)


---------------------QUESTION 5-------------------------
postgres=# SELECT ship_country, COUNT(ship_country) FROM orders
 WHERE ship_country <> 'USA' AND shipped_date >= '1996-08-01'
 AND shipped_date <= '1996-08-31' GROUP BY ship_country;

 ship_country | count
--------------+-------
 Spain        |     2
 Mexico       |     1
 Brazil       |     1
 UK           |     1
 Italy        |     1
 Venezuela    |     2
 Germany      |     7
 Finland      |     1
 Sweden       |     2
 France       |     2
(10 rows)


---------------------QUESTION 6-------------------------
postgres=# SELECT customer_id, COUNT(customer_id) FROM orders
 GROUP BY customer_id HAVING COUNT(customer_id) < 4 ORDER BY customer_id DESC;

 customer_id | count
-------------+-------
 TRAIH       |     3
 THECR       |     3
 NORTS       |     3
 LAZYK       |     2
 LAUGB       |     3
 GROSR       |     2
 FRANR       |     3
 CONSH       |     3
 CENTC       |     1
 BOLID       |     3
(10 rows)


---------------------QUESTION 7-------------------------
postgres=# SELECT SUM(units_in_stock * unit_price) FROM products
 GROUP BY supplier_id HAVING COUNT(*) > 3;

       sum
------------------
 4409.65005874634
 3301.84996032715
  2833.7999420166
 4276.99999523163
(4 rows)


---------------------QUESTION 8-------------------------
postgres=# SELECT company_name, product_name, unit_price FROM suppliers, products
 WHERE products.supplier_id = suppliers.supplier_id AND suppliers.country = 'France' ORDER BY unit_price DESC;

        company_name        |      product_name      | unit_price
----------------------------+------------------------+------------
 Aux joyeux ecclésiastiques | Côte de Blaye          |      263.5
 Gai pâturage               | Raclette Courdavault   |         55
 Gai pâturage               | Camembert Pierrot      |         34
 Aux joyeux ecclésiastiques | Chartreuse verte       |         18
 Escargots Nouveaux         | Escargots de Bourgogne |      13.25
(5 rows)

---------------------QUESTION 9-------------------------
postgres=# SELECT employees.last_name, employees.first_name, employees.title, employees.extension,
 COUNT(employees.employee_id) AS employee_orders FROM employees INNER JOIN orders
ON (employees.employee_id = orders.employee_id) GROUP BY employees.last_name, employees.first_name,
employees.title, employees.extension HAVING COUNT(employees.employee_id) < 75;

 last_name | first_name |        title         | extension | employee_orders
-----------+------------+----------------------+-----------+-----------------
 Suyama    | Michael    | Sales Representative | 428       |              67
 Buchanan  | Steven     | Sales Manager        | 3453      |              42
 King      | Robert     | Sales Representative | 465       |              72
 Dodsworth | Anne       | Sales Representative | 452       |              43
(4 rows)

---------------------QUESTION 10-------------------------
postgres=# CREATE TABLE top_items (
item_id INTEGER NOT NULL,
item_code INTEGER NOT NULL,
item_name VARCHAR(40) NOT NULL,
inventory_date DATE NOT NULL,
supplier_id INTEGER NOT NULL,
item_quantity INTEGER NOT NULL,
item_price INTEGER NOT NULL,
PRIMARY KEY(item_id)
);
CREATE TABLE

---------------------QUESTION 11-------------------------
prostgres=# INSERT INTO top_items (item_id, item_code, inventory_date, supplier_id, item_quantity, item_price)
SELECT product_id, category_id, product_name, '2019-14-11', supplier_id, units_in_stock, unit_price FROM products
 WHERE (unit_price * units_in_stock) > 2500;

---------------------QUESTION 12-------------------------
DELETE FROM top_items WHERE item_quantity < 50;

---------------------QUESTION 13-------------------------
ALTER TABLE top_items ADD inventory_value DECIMAL (9,2) CONSTRAINT inventory_value DEFAULT (0);

---------------------QUESTION 14-------------------------
UPDATE top_items SET inventory_value = (item_price * item_quantity);

---------------------QUESTION 15-------------------------
DROP TABLE IF EXISTS top_items;

---------------------QUESTION 16-------------------------
postgres=# CREATE TABLE employee_list AS (SELECT first_name, COUNT(distinct customer_id)
 FROM employees NATURAL JOIN orders GROUP BY first_name, last_name HAVING COUNT(distinct customer_id) >= 50
  ORDER BY COUNT(distinct customer_id) DESC);

  first_name | count
------------+-------
Margaret   |    75
Nancy      |    65
Janet      |    63
Andrew     |    59
Laura      |    56
(5 rows)

---------------------QUESTION 17-------------------------
postgres=# SELECT * FROM products WHERE (SELECT AVG(unit_price) FROM products) < unit_price;

product_id |          product_name           | supplier_id | category_id |  quantity_per_unit   | unit_price | units_in_stock | units_on_order | reorder_level | discontinued
------------+---------------------------------+-------------+-------------+----------------------+------------+----------------+----------------+---------------+--------------
          7 | Uncle Bob's Organic Dried Pears |           3 |           7 | 12 - 1 lb pkgs.      |         30 |             15 |              0 |            10 |            0
          8 | Northwoods Cranberry Sauce      |           3 |           2 | 12 - 12 oz jars      |         40 |              6 |              0 |             0 |            0
          9 | Mishi Kobe Niku                 |           4 |           6 | 18 - 500 g pkgs.     |         97 |             29 |              0 |             0 |            1
         10 | Ikura                           |           4 |           8 | 12 - 200 ml jars     |         31 |             31 |              0 |             0 |            0
         12 | Queso Manchego La Pastora       |           5 |           4 | 10 - 500 g pkgs.     |         38 |             86 |              0 |             0 |            0
         17 | Alice Mutton                    |           7 |           6 | 20 - 1 kg tins       |         39 |              0 |              0 |             0 |            1
         18 | Carnarvon Tigers                |           7 |           8 | 16 kg pkg.           |       62.5 |             42 |              0 |             0 |            0
:

---------------------QUESTION 18-------------------------
postgres=# SELECT COUNT(*) FROM employees INNER JOIN orders ON employees.employee_id = orders.employee_id
 WHERE employees.address != orders.ship_address;

 count
-------
   830
(1 row)

---------------------QUESTION 19-------------------------
postgres=# SELECT first_name, last_name, COUNT(distinct customer_id) AS unique_customers,
 COUNT(customer_id) AS num_orders FROM employees NATURAL JOIN orders WHERE order_date BETWEEN '1998-01-01' AND '1998-12-31'
 GROUP BY first_name, last_name;

 first_name | last_name | unique_customers | num_orders
------------+-----------+------------------+------------
 Andrew     | Fuller    |               34 |         39
 Anne       | Dodsworth |               16 |         19
 Janet      | Leverling |               30 |         38
 Laura      | Callahan  |               23 |         31
 Margaret   | Peacock   |               33 |         44
 Michael    | Suyama    |               17 |         19
 Nancy      | Davolio   |               32 |         42
 Robert     | King      |               21 |         25
 Steven     | Buchanan  |               11 |         13
(9 rows)

---------------------QUESTION 20-------------------------
postgres=# SELECT COUNT(*) FROM orders WHERE shipped_date - order_date <= 7 AND ship_country = 'Sweden';

 count
-------
    15
(1 row)

---------------------QUESTION 21-------------------------
postgres=# SELECT product_id, product_name FROM products p FULL OUTER JOIN suppliers s ON
 p.supplier_id = s.supplier_id WHERE s.company_name = 'Leka Trading';

 product_id |         product_name
------------+-------------------------------
         42 | Singaporean Hokkien Fried Mee
         43 | Ipoh Coffee
         44 | Gula Malacca
(3 rows)
